@model CapstoneSkinMarket.Models.Users
<link href="~/Stile/Css/Register.css" rel="stylesheet" />
@{
    ViewBag.Title = "Registrati!";
}

<h2 class="text-center">Il Tuo Viaggio <span>Inizia Qui</span></h2>

@if (!string.IsNullOrEmpty(TempData["message"] as string))
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["message"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal mt-5">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            <div class="d-flex justify-content-center">
                @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="d-flex justify-content-center">
                @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="d-flex justify-content-center">
                @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="d-flex justify-content-center">
                @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="d-flex justify-content-center">
                @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="d-flex justify-content-center">
                @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="d-flex justify-content-center">
                @Html.LabelFor(model => model.Cognome, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="d-flex justify-content-center">
                @Html.EditorFor(model => model.Cognome, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="d-flex justify-content-center">
                @Html.ValidationMessageFor(model => model.Cognome, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="d-flex justify-content-center">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="d-flex justify-content-center">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="d-flex justify-content-center">
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="d-flex justify-content-center">
                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="d-flex justify-content-center">
                @Html.PasswordFor(model => model.Password, new { @class = "form-control" })
            </div>
            <div class="d-flex justify-content-center">
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div class="d-flex justify-content-center">
                @Html.LabelFor(model => model.DataNascita, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="d-flex justify-content-center">
                @Html.TextBoxFor(model => model.DataNascita, new { @class = "form-control", @type = "date" })
            </div>
            <div class="d-flex justify-content-center">
                @Html.ValidationMessageFor(model => model.DataNascita, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div class="d-flex justify-content-center">
                @Html.LabelFor(model => model.CodFiscale, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="d-flex justify-content-center">
                @Html.EditorFor(model => model.CodFiscale, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="d-flex justify-content-center">
                @Html.ValidationMessageFor(model => model.CodFiscale, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="d-flex justify-content-center">
                @Html.LabelFor(model => model.Telefono, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="d-flex justify-content-center">
                @Html.EditorFor(model => model.Telefono, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="d-flex justify-content-center">
                @Html.ValidationMessageFor(model => model.Telefono, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>


    <div class="form-group mt-5">
        <div class="d-flex justify-content-center">
            <input type="submit" value="Create" class="btn btn-viola" />
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
